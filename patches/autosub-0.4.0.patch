--- __init__.py	2019-01-27 12:01:21.639775227 +0700
+++ __init__-pyQtAutosub.py	2019-01-27 11:59:39.901780854 +0700
@@ -220,6 +220,13 @@
         elapsed_time += chunk_duration
     return regions
 
+def percentage(currentval, maxval):
+    return 100 * currentval / float(maxval)
+
+
+def output_progress(listener_progress, str_task, progress_percent):
+    if listener_progress != None:
+        listener_progress(str_task,progress_percent)
 
 def generate_subtitles( # pylint: disable=too-many-locals,too-many-arguments
         source_path,
@@ -229,6 +236,7 @@
         dst_language=DEFAULT_DST_LANGUAGE,
         subtitle_file_format=DEFAULT_SUBTITLE_FORMAT,
         api_key=None,
+        listener_progress=None,
     ):
     """
     Given an input audio/video file, generate subtitles in the specified language and format.
@@ -245,21 +253,28 @@
     transcripts = []
     if regions:
         try:
-            widgets = ["Converting speech regions to FLAC files: ", Percentage(), ' ', Bar(), ' ',
+            str_task_1 = "Converting speech regions to FLAC files: "
+            widgets = [str_task_1, Percentage(), ' ', Bar(), ' ',
                        ETA()]
-            pbar = ProgressBar(widgets=widgets, maxval=len(regions)).start()
+            len_regions = len(regions)
+            pbar = ProgressBar(widgets=widgets, maxval=len_regions).start()
             extracted_regions = []
             for i, extracted_region in enumerate(pool.imap(converter, regions)):
                 extracted_regions.append(extracted_region)
                 pbar.update(i)
+                progress_percent= percentage(i, len_regions)
+                output_progress(listener_progress,str_task_1,progress_percent)
             pbar.finish()
 
-            widgets = ["Performing speech recognition: ", Percentage(), ' ', Bar(), ' ', ETA()]
+            str_task_2 = "Performing speech recognition: "
+            widgets = [str_task_2, Percentage(), ' ', Bar(), ' ', ETA()]
             pbar = ProgressBar(widgets=widgets, maxval=len(regions)).start()
 
             for i, transcript in enumerate(pool.imap(recognizer, extracted_regions)):
                 transcripts.append(transcript)
                 pbar.update(i)
+                progress_percent= percentage(i, len_regions)
+                output_progress(listener_progress,str_task_2,progress_percent)
             pbar.finish()
 
             if src_language.split("-")[0] != dst_language.split("-")[0]:
